{"version":3,"file":"static/js/415.af0d7adb.chunk.js","mappings":"sLAEaA,E,QAAOC,QAAAA,IAAH,+G,SCATC,EAAQC,EAAQ,MAAhBD,IAEKE,EAAS,WACpB,OACE,SAACJ,EAAD,WACE,SAACE,EAAD,CACEG,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,cACVC,aAAc,CAAC,EACfC,aAAa,iBAIpB,C,wGCdYC,EAAOV,EAAAA,QAAAA,GAAH,6HAQJW,EAAOX,EAAAA,QAAAA,GAAH,8DAKJY,GAAWZ,EAAAA,EAAAA,SAAOa,EAAAA,GAAPb,CAAH,mE,mBCcrB,EAxBmB,SAAC,GAAgB,IAAdc,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,SAAAC,GAAK,eACf,SAACP,EAAD,WACE,UAACC,EAAD,CAAUO,MAAO,CAAEC,KAAML,GAAYM,GAAE,kBAAaH,EAAMI,IAA1D,WACE,gBACEC,IACEL,EAAMM,YAZD,mCAacN,EAAMM,YACrBC,EAENC,IAAG,UAAER,EAAMS,aAAR,QAAiBT,EAAMU,QAE5B,kCAAKV,EAAMS,aAAX,QAAoBT,EAAMU,WAVnBV,EAAMI,GADF,KAiBtB,C,6FCPD,UAhBa,WACX,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IACXE,EAAAA,EAAAA,MACGC,KAAKL,GACLM,SAAQ,WACPJ,GAAW,EACZ,GACJ,GAAE,KAEI,yBAAMD,GAAU,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYjB,OAAQA,KACzD,C,yLCjBKuB,E,QAAQC,EAAAA,OAAa,CACzBC,QAAS,gCACTC,OAAQ,CAAEC,QAAS,sCAGd,SAAeP,IAAtB,4CAAO,OAAP,oBAAO,6GAEkBG,EAAMK,IAAI,sBAF5B,cAEG5B,EAFH,yBAIIA,EAAO6B,KAAKC,SAJhB,gCAMHC,QAAQC,MAAR,MANG,gFAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEkBX,EAAMK,IAAI,eAAgB,CAC7CF,OAAQ,CACNQ,MAAAA,KAJD,cAEGlC,EAFH,yBAQIA,EAAO6B,KAAKC,SARhB,gCAUHC,QAAQC,MAAR,MAVG,gFAcA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgC3B,GAAhC,gGAEiBe,EAAMK,IAAN,gBAAmBpB,IAFpC,cAEGJ,EAFH,yBAIIA,EAAMyB,MAJV,gCAMHE,QAAQC,MAAR,MANG,gFAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC5B,GAAhC,gGAEmBe,EAAMK,IAAN,gBAAmBpB,EAAnB,aAFnB,cAEG6B,EAFH,yBAIIA,EAAQR,KAAKS,MAJjB,gCAMHP,QAAQC,MAAR,MANG,gFAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgC/B,GAAhC,gGAEmBe,EAAMK,IAAN,gBAAmBpB,EAAnB,aAFnB,cAEGgC,EAFH,yBAIIA,EAAQX,KAAKC,SAJjB,gCAMHC,QAAQC,MAAR,MANG,gF","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home.jsx","utils/MoviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Spin = styled.div`\n  position: absolute;\n  top: 20%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { Spin } from './Loader.styled';\n\nconst { Dna } = require('react-loader-spinner');\n\nexport const Loader = () => {\n  return (\n    <Spin>\n      <Dna\n        visible={true}\n        height=\"100\"\n        width=\"100\"\n        ariaLabel=\"dna-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"dna-wrapper\"\n      />\n    </Spin>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 16px;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 25px;\n`;\n\nexport const Item = styled.li`\n  max-width: 280px;\n  color: black;\n`;\n\nexport const ItemLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Item, ItemLink, List } from './MovieList.styled';\nimport defaultImg from '../../images/movie-pic.jpg';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w300/';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <Item key={movie.id}>\n          <ItemLink state={{ from: location }} to={`/movies/${movie.id}`}>\n            <img\n              src={\n                movie.poster_path\n                  ? BASE_IMG_URL + movie.poster_path\n                  : defaultImg\n              }\n              alt={movie.title ?? movie.name}\n            />\n            <h3>{movie.title ?? movie.name}</h3>\n          </ItemLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n","import { Loader } from 'components/Loader/Loader';\nimport MoviesList from 'components/MovieList/MovieList';\nimport { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'utils/MoviesAPI';\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getTrendingMovies()\n      .then(getMovies)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return <div>{loading ? <Loader /> : <MoviesList movies={movies} />}</div>;\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst agent = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: { api_key: '80c3b79aa997143da0fce24113ded47b' },\n});\n\nexport async function getTrendingMovies() {\n  try {\n    const movies = await agent.get('trending/movie/day');\n\n    return movies.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMoviesByQuery(query) {\n  try {\n    const movies = await agent.get('search/movie', {\n      params: {\n        query,\n      },\n    });\n\n    return movies.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMoviesDetails(id) {\n  try {\n    const movie = await agent.get(`movie/${id}`);\n\n    return movie.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMoviesCredits(id) {\n  try {\n    const credits = await agent.get(`movie/${id}/credits`);\n\n    return credits.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMoviesReviews(id) {\n  try {\n    const reviews = await agent.get(`movie/${id}/reviews`);\n\n    return reviews.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["Spin","styled","Dna","require","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","List","Item","ItemLink","NavLink","movies","location","useLocation","map","movie","state","from","to","id","src","poster_path","defaultImg","alt","title","name","useState","getMovies","loading","setLoading","useEffect","getTrendingMovies","then","finally","agent","axios","baseURL","params","api_key","get","data","results","console","error","getMoviesByQuery","query","getMoviesDetails","getMoviesCredits","credits","cast","getMoviesReviews","reviews"],"sourceRoot":""}